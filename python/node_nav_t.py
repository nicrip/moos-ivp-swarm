"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class node_nav_t(object):
    __slots__ = ["nav_long", "nav_lat", "nav_depth", "nav_x", "nav_y"]

    def __init__(self):
        self.nav_long = 0.0
        self.nav_lat = 0.0
        self.nav_depth = 0.0
        self.nav_x = 0.0
        self.nav_y = 0.0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(node_nav_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ddddd", self.nav_long, self.nav_lat, self.nav_depth, self.nav_x, self.nav_y))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != node_nav_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return node_nav_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = node_nav_t()
        self.nav_long, self.nav_lat, self.nav_depth, self.nav_x, self.nav_y = struct.unpack(">ddddd", buf.read(40))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if node_nav_t in parents: return 0
        tmphash = (0x74a4411f71c3cb2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if node_nav_t._packed_fingerprint is None:
            node_nav_t._packed_fingerprint = struct.pack(">Q", node_nav_t._get_hash_recursive([]))
        return node_nav_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

